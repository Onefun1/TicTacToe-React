{"version":3,"sources":["Game.js","App.js","serviceWorker.js","index.js"],"names":["winPositions","Game","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","cells","Array","fill","winner","currentTurn","value","index","winnerIs","_this$state","toConsumableArray","mark","checkWinner","setState","prevState","_i","length","position","_ref","a","b","c","console","log","_this2","_this$state2","react_default","createElement","className","concat","map","cell","key","onClick","markCell","fillCells","restartGame","React","Component","App","src_Game","Boolean","window","location","hostname","match","rootElement","document","getElementById","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wOAEMA,EAAe,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAgGxDC,cA7Fb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACKI,MAAQ,CACXC,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,KACRC,YAAa,GALHZ,yEASJa,GACR,OAAOA,GAAS,oCAGTC,GAAO,IAGVC,EAHUC,EACkBb,KAAKI,MAA7BI,EADMK,EACNL,OAAQC,EADFI,EACEJ,YACVJ,EAAKP,OAAAgB,EAAA,EAAAhB,CAAOE,KAAKI,MAAMC,OAG7B,GAAqB,OAAjBA,EAAMM,KAAmBH,EAA7B,CAIA,IAAMO,EAAON,EAAc,IAAM,EAAI,IAAM,IAC3CJ,EAAMM,GAASI,EACfH,EAAWZ,KAAKgB,YAAYX,GAER,IAAhBI,GAAkC,OAAbG,IACvBA,EAAW,QAGbZ,KAAKiB,SAAS,SAAAC,GACZ,MAAO,CACLb,QACAG,OAAQI,EACRH,YAAaS,EAAUT,YAAc,0CAK/BJ,GACV,QAAAc,EAAA,EAAAA,EAAuBxB,EAAvByB,OAAAD,IAAqC,CAAhC,IAAME,EAAY1B,EAAJwB,GAAkBG,EAAAxB,OAAAgB,EAAA,EAAAhB,CACbuB,GAAfE,EAD4BD,EAAA,GACzBE,EADyBF,EAAA,GACtBG,EADsBH,EAAA,GAGnC,GAAiB,OAAbjB,EAAMkB,IAAelB,EAAMkB,KAAOlB,EAAMmB,IAAMnB,EAAMmB,KAAOnB,EAAMoB,GACnE,OAAOpB,EAAMkB,GAGjB,OAAO,2CAIPG,QAAQC,IAAI,SACZ3B,KAAKiB,SAAS,CACZZ,MAAOC,MAAM,GAAGC,KAAK,MACrBC,OAAQ,KACRC,YAAa,qCAIR,IAAAmB,EAAA5B,KAAA6B,EACgC7B,KAAKI,MAApCC,EADDwB,EACCxB,MAAOG,EADRqB,EACQrB,OAAQC,EADhBoB,EACgBpB,YAEvB,OACEqB,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,WACED,EAAAP,EAAAQ,cAAA,MAAIC,UAAU,SAAd,eACAF,EAAAP,EAAAQ,cAAA,UACc,SAAXvB,EACG,OACAA,EAAM,aAAAyB,OACOzB,GADP,QAAAyB,OAEExB,KAGhBqB,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,gBACZ3B,EAAM6B,IAAI,SAACC,EAAMxB,GAAP,OACTmB,EAAAP,EAAAQ,cAAA,OACEK,IAAKzB,EACLqB,UAAU,qBACVK,QAAS,kBAAMT,EAAKU,SAAS3B,KAE5BiB,EAAKW,UAAUJ,MAGpBL,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,kBAAkBK,QAAS,kBAAMT,EAAKY,gBAArD,oBArFSC,IAAMC,WCWVC,mLARX,OACEb,EAAAP,EAAAQ,cAAA,OAAKC,UAAU,OACbF,EAAAP,EAAAQ,cAACa,EAAD,cAJUF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OAAOxB,EAAAP,EAAAQ,cAACwB,EAAD,MAASL,GD0HnB,kBAAmBM,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.321ca7d6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst winPositions = [\"012\", \"036\", \"048\", \"147\", \"246\", \"258\", \"345\", \"678\"];\r\n\r\nclass Game extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      cells: Array(9).fill(null),\r\n      winner: null,\r\n      currentTurn: 1\r\n    };\r\n  }\r\n\r\n  fillCells(value) {\r\n    return value || \"\";\r\n  }\r\n\r\n  markCell(index) {\r\n    const { winner, currentTurn } = this.state;\r\n    const cells = [...this.state.cells];\r\n    let winnerIs;\r\n\r\n    if (cells[index] !== null || winner) {\r\n      return;\r\n    }\r\n\r\n    const mark = currentTurn % 2 === 1 ? \"X\" : \"O\";\r\n    cells[index] = mark;\r\n    winnerIs = this.checkWinner(cells);\r\n\r\n    if (currentTurn === 9 && winnerIs === null) {\r\n      winnerIs = \"Draw\";\r\n    }\r\n\r\n    this.setState(prevState => {\r\n      return {\r\n        cells,\r\n        winner: winnerIs,\r\n        currentTurn: prevState.currentTurn + 1\r\n      };\r\n    });\r\n  }\r\n\r\n  checkWinner(cells) {\r\n    for (const position of winPositions) {\r\n      const [a, b, c] = [...position];\r\n\r\n      if (cells[a] !== null && cells[a] === cells[b] && cells[b] === cells[c]) {\r\n        return cells[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  restartGame() {\r\n    console.log(\"Click\");\r\n    this.setState({\r\n      cells: Array(9).fill(null),\r\n      winner: null,\r\n      currentTurn: 1\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { cells, winner, currentTurn } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <div>\r\n          <h1 className=\"Title\">Tic Tac Toe</h1>\r\n          <h3>\r\n            {winner === \"Draw\"\r\n              ? \"DRAW\"\r\n              : winner\r\n              ? `Winner is ${winner}`\r\n              : `Move ${currentTurn}`}\r\n          </h3>\r\n        </div>\r\n        <div className=\"playingField\">\r\n          {cells.map((cell, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"playingField__cell\"\r\n              onClick={() => this.markCell(index)}\r\n            >\r\n              {this.fillCells(cell)}\r\n            </div>\r\n          ))}\r\n          <div className=\"restart__button\" onClick={() => this.restartGame()}>\r\n            Restart\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Game from \"./Game\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Game />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}